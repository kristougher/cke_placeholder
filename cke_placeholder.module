<?php

/**
 * @file
 * CKEditor placeholder filter.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\cke_placeholder\CkePlaceholderLibraryInterface;
use Drupal\cke_placeholder\Form\CkePlaceholderLibraryForm;

/**
 * Implements hook_help().
 */
function cke_placeholder_help($route_name, RouteMatchInterface $route_match) {
  if ($route_name == 'help.page.cke_placeholder') {
    return t('<p>The CKE placeholder filter handling placeholders for embedded widgets in CKEditor.</p>');
  }
}

/**
 * Implements hook_theme().
 */
function cke_placeholder_theme() {
  $themes = [
    'cke_placeholder_source_pane' => [
      'variables' => [
        'source_items' => [],
        'offset' => NULL,
        'display_pager' => NULL,
      ],
      'template' => 'cke_placeholder.source_pane',
    ],
    'cke_placeholder_library_item' => [
      'variables' => [
        'cke_placeholder_tag' => NULL,
        'description' => NULL,
        'image_url' => NULL,
        'data' => array(),
      ],
      'template' => 'cke_placeholder.library_item',
    ],
    'cke_placeholder_library_item_list' => [
      'variables' => [
        'cke_placeholder_tag' => NULL,
        'wrapper_id' => NULL,
        'items' => array(),
        'no_wrapper' => NULL,
      ],
      'template' => 'cke_placeholder.library_item_list',
    ],
    'cke_placeholder_update_done' => [
      'variables' => [
        'fid' => NULL,
        'title' => NULL,
        'caption' => NULL,
      ],
      'template' => 'cke_placeholder.update_done',
    ],
    'cke_placeholder_entity_embed' => [
      'variables' => [
        'caption' => NULL,
        'entity_type' => NULL,
        'view_mode' => NULL,
        'uuid' => NULL,
      ],
      'template' => 'cke_placeholder_entity_embed',
    ],
  ];

  return $themes;
}

/**
 * Preg_replace callback for the filter.
 *
 * @param array $match
 *   Regex matches.
 */
function cke_placeholder_filter_process_callback(array $match, $set_filter = NULL) {
  static $currently_processing = array();
  static $filter = NULL;

  if (!empty($set_filter)) {
    $filter = $set_filter;
    return NULL;
  }

  if (empty($match['tag']) || !($tag = cke_placeholder_tags($match['tag']))) {
    return NULL;
  }

  if (!class_exists($tag['class'])) {
    return NULL;
  }

  $lock_key = substr($tag['class'] . ':' . md5($match['args']), 0, 100);

  // Make sure that we don't process elements recursively.
  if (isset($currently_processing[$lock_key])) {
    return $match[0];
  }

  $args = json_decode(str_replace("\\]", "]", $match['args']), 1);
  $plugin = \Drupal::service('plugin.manager.cke_placeholder_tags')->createInstance($match['tag']);
  // $plugin = new $tag['class']([], );
  $currently_processing[$lock_key] = TRUE;
  $render_array = $plugin->process($args);
  $output = render($render_array);

  unset($currently_processing[$lock_key]);

  return $output;
}

/**
 * Returns available tags for filter.
 */
function cke_placeholder_tags($name = NULL) {
  $tags = &drupal_static(__FUNCTION__, array());

  if (!$tags) {
    $pluginManager = \Drupal::service('plugin.manager.cke_placeholder_tags');
    $tags = $pluginManager->getDefinitions();
  }
  if (!empty($name)) {
    return isset($tags[$name]) ? $tags[$name] : NULL;
  }

  return $tags;
}

/**
 * Implements hook_form_alter().
 *
 * Suffix the library to the entity form.
 */
function cke_placeholder_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $library_add = drupal_static('cke_placeholder_field_widget_form_alter');
  $library_added = &drupal_static(__FUNCTION__);

  if (!isset($library_add)) {
    foreach ($form as $element) {
      if (is_array($element) && isset($element['#cke_tabs'])) {
        $library_add = _cke_placeholder_get_dynamic_library();
        $cke_tabs_widget = TRUE;
      }
    }
  }
  if ((isset($library_add) && !isset($library_added) && ($form_id != 'cke_placeholder_library_form'))
    || isset($cke_tabs_widget)) {

    $library_form = new CkePlaceholderLibraryForm();
    $library_form->setupBase();
    $plugin = \Drupal::service('plugin.manager.cke_placeholder_library');
    $definitions = $plugin->getDefinitions();

    foreach ($definitions as $id => $definition) {
      $pluginInstance = $plugin->createInstance($id);
      $library_form->addPane($definition, $pluginInstance);
    }

    $lib_form = array();
    $form['cke_placeholder_library'] = $library_form->buildForm($form, $form_state);

    $form['#attached']['library'][] = 'system/ui.dialog';
    $form['#attached']['library'][] = 'cke_placeholder/cke_placeholder_forms';
    $form['#attached']['drupalSettings']['cke_placeholder'] = [
      'filter' => [],
      'editors' => [],
    ];
    $library_added = TRUE;

    $plugin = \Drupal::service('plugin.manager.cke_placeholder_tags');
    $definitions = $plugin->getDefinitions();
    foreach ($definitions as $name => $definition) {
      $form['#attached']['drupalSettings']['cke_placeholder']['filter'][$name] = _cke_placeholder_definition_to_settings($definition);
    }

  }
}

/*
function _cke_placeholder_get_dynamic_library() {
  return array(
    'cke_placeholder_library' => array(
      'image' => 'image',
    ),
    'cke_placeholder_document_library' => array(
      'document' => 'document',
    ),
    'upload_file' => array(TRUE),
  );
}
*/

/**
 * Implements hook_field_widget_form_alter().
 */
function cke_placeholder_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {

  $library_add = &drupal_static(__FUNCTION__);
  switch (get_class($context['widget'])) {
    case 'Drupal\text\Plugin\Field\FieldWidget\TextareaWithSummaryWidget':
      $cke_placeholder_widgets['TextareaWithSummaryWidget'] = [
        'cke_placeholder_library' => [
        // 'image' and 'document' below are file types as provided by
        // file_entity. They are used directly in querying file_managed table.
          'image' => 'image',
        ],
        'cke_placeholder_document_library' => [
        // This is file type as provided by file_entity.
          'document' => 'document',
        ],
        'upload_file' => [TRUE],
      ];
      break;

    case 'Drupal\text\Plugin\Field\FieldWidget\TextareaWidget':
      $cke_placeholder_widgets['TextareaWidget'] = [
        'cke_placeholder_library' => [
          'image' => 'image',
        ],
        'cke_placeholder_document_library' => [
          'document' => 'document',
        ],
        'upload_file' => [TRUE],
      ];
      break;

    default:
      $cke_placeholder_widgets = [];
  }
  // Add option other modules, which implements a new widget to USE CKE
  // placeholder functionality.
  Drupal::moduleHandler()->alter('cke_placeholder_field_widget', $cke_placeholder_widgets, $context['widget']);

  if (!empty($cke_placeholder_widgets)) {
    if (!isset($library_add)) {
      $library_add = [];
    }
    $library_add = array_merge($cke_placeholder_widgets, $library_add);
  }
}

function _cke_placeholder_definition_to_settings($plugin_definition) {
  $filter_settings = [];
  foreach ($plugin_definition as $key => $setting) {

    switch (gettype($setting)) {
      case 'string':
        $filter_settings[$key] = $setting;
        break;

      case 'object':
        $filter_settings[$key] = $setting->render();
        break;

      case 'array':
        $filter_settings[$key] = _cke_placeholder_definition_to_settings($setting);
    }
  }
  return $filter_settings;
}

/**
 * Load required JS.
 */
function _cke_placeholder_form_js_include(&$element, &$form_state) {
  $library_add = &drupal_static('cke_placeholder_field_widget_form_alter');

  if (!isset($library_add)) {
    $library_add = array();
  }

  if (empty($element['#field_name'])) {
    return;
  }

  $instance = field_info_instance(
    $element['#entity_type'],
    $element['#field_name'],
    $element['#bundle']
  );

  $cke_placeholder_widgets = array(
    'text_textarea_with_summary' => array(
      'cke_placeholder_library' => array(
        'image' => 'image',
      ),
      'upload_file' => array(TRUE),
    ),
    'text_textarea' => array(
      'cke_placeholder_library' => array(
        'image' => 'image',
      ),
      'upload_file' => array(TRUE),
    ),
  );

  if ($instance['widget']['type'] == 'droptarget') {
    $cke_placeholder_widgets['droptarget'] = array(
      'cke_placeholder_library' => $instance['widget']['settings']['types'],
      'upload_file' => $instance['widget']['settings']['types'],
    );
  }

  if (empty($instance['widget']['type'])
    || empty($cke_placeholder_widgets[$instance['widget']['type']])) {
    return;
  }

  $library_add = array_merge($cke_placeholder_widgets[$instance['widget']['type']], $library_add);

  return $element;
}
